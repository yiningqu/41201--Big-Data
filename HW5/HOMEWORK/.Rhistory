plot(bacon_1, main="1st-order Neighborhood for Bacon, Kevin",
vertex.frame.color=NA, vertex.label=NA, edge.arrow.width=.5, vertex.color=V(bacon_1)$color)
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Neighborhoods of order 1, 2, and 3
neighborhood1 <- neighborhood(actnet, order = 1, nodes = kevin_bacon_id, mode = "all")
neighborhood2 <- neighborhood(actnet, order = 2, nodes = kevin_bacon_id, mode = "all")
neighborhood3 <- neighborhood(actnet, order = 3, nodes = kevin_bacon_id, mode = "all")
# Set up the plotting area to display three plots side by side
par(mfrow=c(1,3))
# Function to plot neighborhood with differentiated colors for Kevin Bacon
plot_neighborhood <- function(actnet, neighborhood, title) {
sg <- induced_subgraph(actnet, vids = unlist(neighborhood))
# Default color for all vertices
V(sg)$color <- "blue"
# Special color for Kevin Bacon
V(sg)[which(V(sg)$name == "Bacon, Kevin")]$color <- "red"
plot(sg, main = title, vertex.size=10, vertex.label=NA, vertex.color=V(sg)$color)
}
# Plot each neighborhood
plot_neighborhood(actnet, neighborhood1, "1st Order Neighborhood")
plot_neighborhood(actnet, neighborhood2, "2nd Order Neighborhood")
plot_neighborhood(actnet, neighborhood3, "3rd Order Neighborhood")
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Adjusted function to correctly plot neighborhoods with specific edge rules
plot_neighborhood_corrected <- function(graph, center_id, order, title) {
# Get the neighborhood nodes including center
neighborhood_nodes <- unlist(neighborhood(graph, order=order, nodes=center_id, mode="all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Remove edges not connected to the center for the 1st order neighborhood
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!incident(sg, center_id)])
}
# Setting colors: center red, others blue
V(sg)$color <- "blue"
V(sg)[center_id]$color <- "red"
# Plot the graph
plot(sg, main=title, vertex.size=10, vertex.label=NA, vertex.color=V(sg)$color)
}
# Setup the plot area
par(mfrow=c(1,3))
# Plot corrected neighborhoods
plot_neighborhood_corrected(actnet, kevin_bacon_id, 1, "1st Order Neighborhood")
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Adjusted function to correctly plot neighborhoods with specific edge rules
plot_neighborhood_corrected <- function(graph, center_id, order, title) {
# Get the neighborhood nodes including center
neighborhood_nodes <- unlist(neighborhood(graph, order=order, nodes=center_id, mode="all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Remove edges not connected to the center for the 1st order neighborhood
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!incident(sg, center_id)])
}
# Setting colors: center red, others blue
V(sg)$color <- "blue"
V(sg)[center_id]$color <- "red"
# Plot the graph
plot(sg, main=title, vertex.size=10, vertex.label=NA, vertex.color=V(sg)$color)
}
# Setup the plot area
par(mfrow=c(1,3))
# Plot corrected neighborhoods
plot_neighborhood_corrected(actnet, kevin_bacon_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
source("~/Desktop/研究生/Big data/HW5/HOMEWORK/actors_start.R", echo=TRUE)
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
plot_neighborhood_direct_connections(actnet,local_center_id, 2, "2nd Order Neighborhood")
plot_neighborhood_direct_connections(actnet,local_center_id, 3, "3rd Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
## actors network example
library(igraph)
### GRAPH
## read in a graph in the `graphml' format: xml for graphs.
## it warns about pre-specified ids, but we want this here
## (these ids match up with the castlists in movies.txt)
actnet <- read.graph("actors.graphml",format="graphml")
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
# Q1
# The actors network has an edge if the two actors were in the same movie.
# Plot the entire actors network.
# plot(actnet, vertex.size=10, vertex.label=NA,
#      vertex.color="skyblue", edge.color="gray",
#      main="Actors Network")
# Q2
# Plot the neighborhoods for “Bacon, Kevin” at orders 1-3.
# How does the size of the network change with order?
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet,local_center_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet, kevin_bacon_id, 1, "1st Order Neighborhood")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
sg <- delete_edges(sg, E(sg)[!inc(sg, local_center_id)])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet, kevin_bacon_id, 1, "1st Order Neighborhood")
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Function to plot a corrected neighborhood focusing on direct connections to the center vertex
plot_neighborhood_direct_connections <- function(graph, center_id, order, title) {
# Extract neighborhood nodes including the center
neighborhood_nodes <- unlist(neighborhood(graph, order = order, nodes = center_id, mode = "all"))
# Create the induced subgraph from these nodes
sg <- induced_subgraph(graph, vids = neighborhood_nodes)
# Retrieve local ID for Kevin Bacon in the subgraph
local_center_id <- which(V(sg)$name == "Bacon, Kevin")
# For 1st Order, keep only edges directly connected to Kevin Bacon
if (order == 1) {
# Delete edges not connected to the local_center_id
edges_to_keep <- incident(sg, local_center_id, mode = "all")
sg <- delete_edges(sg, E(sg)[!edges_to_keep])
}
# Setting colors: Kevin Bacon red, others blue
V(sg)$color <- "blue"
V(sg)[local_center_id]$color <- "red"
# Plot the graph
plot(sg, main = title, vertex.size = 10, vertex.label = NA, vertex.color = V(sg)$color)
}
# Finding the vertex id for "Bacon, Kevin"
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Set up the plotting area to display three plots side by side
par(mfrow = c(1, 3))
# Plot each neighborhood with correct edge handling
plot_neighborhood_direct_connections(actnet, kevin_bacon_id, 1, "1st Order Neighborhood")
plot_neighborhood_direct_connections(actnet, kevin_bacon_id, 2, "2nd Order Neighborhood")
plot_neighborhood_direct_connections(actnet, kevin_bacon_id, 3, "3rd Order Neighborhood")
View(actnet)
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
# Neighborhoods of order 1, 2, and 3
neighborhood1 <- neighborhood(actnet, order = 1, nodes = kevin_bacon_id, mode = "in")
neighborhood2 <- neighborhood(actnet, order = 2, nodes = kevin_bacon_id, mode = "in")
neighborhood3 <- neighborhood(actnet, order = 3, nodes = kevin_bacon_id, mode = "in")
# Plotting the neighborhoods
par(mfrow=c(1,3))  # Set up the plotting area to display three plots side by side
plot(induced_subgraph(actnet, vids = unlist(neighborhood1)), main = "1st Order Neighborhood", vertex.size=7, vertex.label.cex=0.7)
plot(induced_subgraph(actnet, vids = unlist(neighborhood2)), main = "2nd Order Neighborhood", vertex.size=7, vertex.label.cex=0.7)
plot(induced_subgraph(actnet, vids = unlist(neighborhood3)), main = "3rd Order Neighborhood", vertex.size=7, vertex.label.cex=0.7)
latimes <- graph.neighborhood(kevin_bacon_id, 1, V(actnet),mode="in")[[1]]
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
## actors network example
library(igraph)
### GRAPH
## read in a graph in the `graphml' format: xml for graphs.
## it warns about pre-specified ids, but we want this here
## (these ids match up with the castlists in movies.txt)
actnet <- read.graph("actors.graphml",format="graphml")
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
# Q1
# The actors network has an edge if the two actors were in the same movie.
# Plot the entire actors network.
# plot(actnet, vertex.size=10, vertex.label=NA,
#      vertex.color="skyblue", edge.color="gray",
#      main="Actors Network")
# Q2
# Plot the neighborhoods for “Bacon, Kevin” at orders 1-3.
# How does the size of the network change with order?
kevin_bacon_id <- which(V(actnet)$name == "Bacon, Kevin")
latimes <- graph.neighborhood(kevin_bacon_id, 1, V(actnet),mode="in")[[1]]
latimes <- make_ego_graph.neighborhood(kevin_bacon_id, 1, V(actnet),mode="in")[[1]]
latimes <- make_ego_graph(kevin_bacon_id, 1, V(actnet),mode="in")[[1]]
latimes <- make_ego_graph(kevin_bacon_id, 1, V(actnet),mode="in")[[1]]
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
#### Search for "California"
library(igraph)
## read the edges and merge with edge names
caedges <- read.csv("CaliforniaEdges.csv")
## actors network example
library(igraph)
### GRAPH
## read in a graph in the `graphml' format: xml for graphs.
## it warns about pre-specified ids, but we want this here
## (these ids match up with the castlists in movies.txt)
actnet <- read.graph("actors.graphml",format="graphml")
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
# Q1
# The actors network has an edge if the two actors were in the same movie.
# Plot the entire actors network.
# plot(actnet, vertex.size=10, vertex.label=NA,
#      vertex.color="skyblue", edge.color="gray",
#      main="Actors Network")
# Q2
# Plot the neighborhoods for “Bacon, Kevin” at orders 1-3.
# How does the size of the network change with order?
kblink <- graph.edgelist(actnet)
View(actnet)
kblink <- graph_from_edgelist(actnet)
View(actnet)
View(actnet)
edge_list <- get.edgelist(actnet)
# Create a new graph object from the edge list
kblink <- graph_from_edgelist(edge_list, directed = FALSE)
kb <- graph.neighborhood(kblink, 1, V(kblink)["Bacon, Kevin"],mode="in")[[1]]
V(kb)$color <- "gold"
V(kb)["Bacon, Kevin"]$color <- "red"
plot(kb, vertex.frame.color=0, edge.arrow.width=.75)
edge_list <- get.edgelist(actnet)
# Create a new graph object from the edge list
kblink <- graph_from_edgelist(edge_list, directed = FALSE)
kb <- graph.neighborhood(kblink, 1, V(kblink)["Bacon, Kevin"],mode="in")[[1]]
V(kb)$color <- "gold"
V(kb)["Bacon, Kevin"]$color <- "red"
plot(kb,vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75)
edge_list <- get.edgelist(actnet)
# Create a new graph object from the edge list
kblink <- graph_from_edgelist(edge_list, directed = FALSE)
kb <- graph.neighborhood(kblink, 1, V(kblink)["Bacon, Kevin"],mode="in")[[1]]
V(kb)$color <- "gold"
V(kb)["Bacon, Kevin"]$color <- "red"
plot(kb, vertex.frame.color=0, edge.arrow.width=.75)
edge_list <- get.edgelist(actnet)
# Create a new graph object from the edge list
kblink <- graph_from_edgelist(edge_list, directed = FALSE)
kb <- graph.neighborhood(kblink, 1, V(kblink)["Bacon, Kevin"],mode="in")[[1]]
V(kb)$color <- "gold"
V(kb)["Bacon, Kevin"]$color <- "red"
plot(kb,vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75)
kb2 <- graph.neighborhood(kblink, 2, V(kblink)["Bacon, Kevin"])[[1]]
V(kb2)$color <- "green"
V(kb2)[V(kb)$name]$color <- "gold"
V(kb2)["Bacon, Kevin"]$color <- "red"
plot(kb2,  edge.arrow.width=0, edge.curved=FALSE,
vertex.label=NA, vertex.frame.color=0, vertex.size=6)
# Run Apriori algorithm
rules <- apriori(casttrans, parameter = list(supp = 0.0001, conf = 0.1, maxlen = 2))
# Inspecting the rules, only print out the first 10
inspect(rules[1:10])
cat("The total number of rules generated is:", length(rules), "\n")
